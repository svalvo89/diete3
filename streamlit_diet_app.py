import streamlit as st\nfrom docx import Document\nfrom docx.shared import Pt\nimport io\nfrom datetime import date\nimport re\nfrom collections import defaultdict\n\ntry:\n    from PyPDF2 import PdfReader\nexcept ImportError:\n    PdfReader = None\n\nst.set_page_config(page_title='Generatore Piano Alimentare', page_icon='🥗', layout='centered')\n\n# -------------------- PATHOLOGY MAP & INFO -------------------- #\nSUPPORTED_PATHOLOGIES = {\n    'diabetes': 'Diabete / controllo glicemico',\n    'hyperchol': 'Ipercolesterolemia / colesterolo alto',\n    'hypertension': 'Ipertensione / riduzione sodio',\n    'endometriosis': 'Endometriosi / dieta anti‑infiammatoria',\n    'celiac': 'Celiachia / gluten‑free',\n    'lactose': 'Intolleranza al lattosio',\n    'ibs': 'IBS / colon irritabile (low‑FODMAP)',\n    'ckd': 'Malattia renale cronica (stadi 1‑3)',\n    'fattyliver': 'Steatosi epatica / dieta ipolipidica',\n    'anemia': 'Anemia sideropenica / ferro + vit. C',\n    'pcos': 'Sindrome PCOS / low‑GI',\n    'nickel': 'Allergia al nichel / dieta low‑Ni',\n    'fructose': 'Intolleranza al fruttosio / FODMAP ridotto'\n}\n\nst.sidebar.header('📋 Dati paziente')\npatient_name = st.sidebar.text_input('Nome paziente', 'Nome Cognome')\nplace = st.sidebar.text_input('Luogo', 'Frascati')\nselected_date = st.sidebar.date_input('Data del piano', date.today())\nheader_date = f"{place}, {selected_date.strftime('%d %B %Y')}"\n\nst.sidebar.header('📑 Anamnesi (opzionale)')\npdf_file = st.sidebar.file_uploader('Carica scheda (PDF)', type=['pdf'])\n\nst.sidebar.header('⚙️ Impostazioni manuali')\nmanual_kcal = st.sidebar.number_input('Kcal target (0 = auto)', 0, 5000, 0)\nmanual_pathologies_text = st.sidebar.text_input('Patologie o condizioni (separa con virgole)', '')\nshow_free_meal = st.sidebar.checkbox('Mostra pasto libero', True)\nmanual_pathologies = [p.strip().lower() for p in manual_pathologies_text.split(',') if p.strip()]\n\nwith st.sidebar.expander('ℹ️ Patologie gestite'):\n    for c, d in SUPPORTED_PATHOLOGIES.items():\n        st.markdown(f'**{c}** – {d}')\n\nst.title('🥗 Generatore diete adattate all\'anamnesi')\n\ndef extract_first(pattern, text, cast=float, default=None):\n    m = re.search(pattern, text)\n    if m:\n        try:\n            return cast(m.group(1).replace(',', '.'))\n        except ValueError:\n            return default\n    return default\n\ndef parse_pdf(pdf):\n    data = defaultdict(lambda: None)\n    if not PdfReader:\n        return data\n    try:\n        reader = PdfReader(pdf)\n        text = '\n'.join(page.extract_text() or '' for page in reader.pages).lower()\n    except Exception as e:\n        st.warning(f'Errore lettura PDF: {e}')\n        return data\n    data['weight'] = extract_first(r'(\d{2,3})\s*kg', text)\n    data['height'] = extract_first(r'(\d{3})\s*cm', text)\n    data['age'] = extract_first(r'et[àa]\s*(\d{1,2})', text, int)\n    if 'maschio' in text or re.search(r'\b(m)\b', text):\n        data['sex'] = 'M'\n    elif 'femmina' in text or re.search(r'\b(f)\b', text):\n        data['sex'] = 'F'\n\n    synonyms = {\n        'diabete': 'diabetes',\n        'glicemia': 'diabetes',\n        'diabetes': 'diabetes',\n        'ipercolesterolemia': 'hyperchol',\n        'colesterolo': 'hyperchol',\n        'ipertensione': 'hypertension',\n        'pressione alta': 'hypertension',\n        'endometriosi': 'endometriosis',\n        'celiachia': 'celiac',\n        'gluten': 'celiac',\n        'senza glutine': 'celiac',\n        'lattosio': 'lactose',\n        'intolleranza lattosio': 'lactose',\n        'ibs': 'ibs',\n        'colon irritabile': 'ibs',\n        'ckd': 'ckd',\n        'insufficienza renale': 'ckd',\n        'renale cronica': 'ckd',\n        'steatosi': 'fattyliver',\n        'fegato grasso': 'fattyliver',\n        'anemia': 'anemia',\n        'ferro basso': 'anemia',\n        'pcos': 'pcos',\n        'ovaio policistico': 'pcos',\n        'nichel': 'nickel',\n        'allergia nichel': 'nickel',\n        'fruttosio': 'fructose',\n        'intolleranza fruttosio': 'fructose',\n    }\n    data['conditions'] = {code for k, code in synonyms.items() if k in text}\n    if 'vegan' in text or 'vegano' in text: data['diet'] = 'vegan'\n    elif 'vegetariano' in text or 'vegetarian' in text: data['diet'] = 'vegetarian'\n    if 'sedent' in text: data['activity'] = 1.2\n    elif 'moderata' in text or '3-5' in text: data['activity'] = 1.55\n    else: data['activity'] = 1.375\n    return data\n\npdf_data = parse_pdf(pdf_file) if pdf_file else defaultdict(lambda: None)\n# merge manual\nfor p in manual_pathologies:\n    pdf_data['conditions'].add(syn_map.get(p, p))\n\nrecognized = pdf_data.get('conditions', set())\nif recognized:\n    st.subheader('Patologie riconosciute')\n    for c in sorted(recognized):\n        st.write(f'• **{c}** – {SUPPORTED_PATHOLOGIES.get(c, "custom")}')\nelse:\n    st.info('Nessuna patologia riconosciuta')\n\ndef calc_kcal(sex,w,h,age,act):\n    if not all([sex,w,h,age]): return 2000\n    bmr = 10*w + 6.25*h - 5*age + (5 if sex=='M' else -161)\n    tdee = bmr*act\n    if w and h:\n        bmi = w/(h/100)**2\n        if bmi>25: tdee -= 400\n    return int(tdee)\n\nkcal_target = manual_kcal or calc_kcal(pdf_data.get('sex'), pdf_data.get('weight'), pdf_data.get('height'), pdf_data.get('age'), pdf_data.get('activity',1.2))\nst.sidebar.markdown(f'### 🔥 Kcal target: **{kcal_target}**')\n\ndef portion(base): return int(base * kcal_target / 2000)\n\ndef generate_plan():\n    doc = Document()\n    run = doc.add_paragraph().add_run(header_date)\n    run.bold = True; run.font.size = Pt(12)\n    doc.add_heading(f'Piano alimentare per {patient_name}', level=1)\n    doc.add_paragraph(f'Calorie target: {kcal_target} kcal'); doc.add_paragraph()\n    cond = pdf_data.get('conditions', set())\n    if cond: doc.add_paragraph('Condizioni: '+', '.join(sorted(cond)).title()); doc.add_paragraph()\n    sup_map = {'hyperchol':['Omega‑3 1g','Riso rosso 10mg'], 'diabetes':['Cannella 500mg','Cromo 200µg'], 'lactose':['Vit D3 2000UI','Ca citrato 500mg']}\n    doc.add_heading('INTEGRAZIONE', level=2)\n    supp = []\n    for c in cond: supp += sup_map.get(c, [])\n    if not supp: supp=['Multivitaminico']\n    for s in supp: doc.add_paragraph(s, style='List Bullet')\n\n    def add_sec(title, opts):\n        doc.add_heading(title, level=2)\n        for i,o in enumerate(opts,1):\n            doc.add_paragraph(f'{i}) {o}', style='List Number')\n        doc.add_paragraph()\n\n    gf = 'celiac' in cond\n    no_lact = 'lactose' in cond\n    bread_p = portion(50)\n    cereal_p = portion(40)\n    breakfasts=[\n        f'{cereal_p} g fiocchi avena'+(' GF' if gf else '')+(' con bevanda soia' if no_lact else ' con latte p.s.'),\n        f'Toast {bread_p} g pane'+(' SG' if gf else ' integrale')+' avocado + uova',\n        ('Yogurt soia' if no_lact else 'Yogurt greco')+' con frutti di bosco',\n        'Pancake proteico avena + albume',\n        'Smoothie verde proteico'\n    ]\n    add_sec('Colazione', breakfasts)\n    add_sec('Spuntino mattutino', ['Frutta','Mandorle 15g','Barretta low‑sugar'])\n    add_sec('Pranzo', ['Insalatona + legumi','Pasta integrale 70g + verdure','Riso basmati + tonno + verdure'])\n    add_sec('Spuntino pomeridiano', ['Yogurt bianco + noci','Cioccolato 90% + nocciole','Spremuta + pistacchi'])\n    add_sec('Cena', ['Verdure + 2 uova','Salmone + asparagi','Burger ceci + carote'])\n    add_sec('Spuntino serale', ['Tisana + cioccolato','Kefir 100ml','Nice‑cream banana'])\n    if show_free_meal:\n        doc.add_heading('PASTO LIBERO', level=2)\n        doc.add_paragraph('1 volta a settimana: pizza (SG se gf) o primo a scelta')\n    foot = doc.add_paragraph('Martina Rastelli\nBIOLOGA NUTRIZIONISTA')\n    foot.alignment = 2\n    buf = io.BytesIO()\n    doc.save(buf)\n    return buf\n\nif st.button('Genera piano alimentare'):\n    buf = generate_plan()\n    st.success('Piano generato!')\n    st.download_button('📥 Scarica DOCX', buf.getvalue(), file_name=f'Dieta_{patient_name.replace(" ", "_")}.docx', mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document')\n